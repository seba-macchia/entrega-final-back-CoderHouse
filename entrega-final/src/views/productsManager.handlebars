<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Administrador de Productos</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>

<body>
  <div class="container">
    <div class="d-flex justify-content-end mb-3">
      <form action="/api/sessions/logout" method="post">
        <button type="submit" class="btn btn-danger">Cerrar sesión</button>
      </form>
    </div>
    <a href="/api/products" class="btn btn-primary">Ir a Productos</a>
    <h1 class="my-4">Administrador de Productos</h1>

    <!-- Formulario para agregar producto -->
    <div class="row">
      <div class="col-md-6">
        <form id="addProductForm" action="/api/products/createProd" method="post">
          <div class="mb-3">
            <label for="title" class="form-label">Titulo</label>
            <input type="text" class="form-control" id="title" name="title" required>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Descripción</label>
            <textarea class="form-control" id="description" name="description" required></textarea>
          </div>
          <div class="mb-3">
            <label for="price" class="form-label">Precio</label>
            <input type="text" class="form-control" id="price" name="price" required>
          </div>
          <div class="mb-3">
            <label for="thumbnail" class="form-label">Imagen</label>
            <input type="text" class="form-control" id="thumbnail" name="thumbnail">
          </div>
          <div class="mb-3">
            <label for="code" class="form-label">Codigo</label>
            <input type="text" class="form-control" id="code" name="code">
          </div>
          <div class="mb-3">
            <label for="stock" class="form-label">Stock</label>
            <input type="number" class="form-control" id="stock" name="stock">
          </div>
          <div class="mb-3">
            <label for="status" class="form-label">Estado</label>
            <select class="form-select" id="status" name="status">
              <option value="true">Disponible</option>
              <option value="false">No Disponible</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="category" class="form-label">Categoria</label>
            <input type="text" class="form-control" id="category" name="category" required>
          </div>
          <input type="hidden" id="owner" name="owner">
          <button type="submit" class="btn btn-primary">Agregar Producto</button>
        </form>
      </div>
    </div>

    <!-- Lista de productos -->
    <div class="row">
      <h2>Lista de Productos</h2>
      <div class="col-md-12">
        <ul id="productsList" class="list-group mt-4">
          <!-- Aquí se mostrarán los productos -->
        </ul>
      </div>
    </div>
  </div>

  <!-- JavaScript para manejar la lógica del product manager -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"
    integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  <script>
    $(document).ready(function () {

      // Obtener el rol del usuario
      const userRole = '{{user.role}}';
      const userId = '{{user._id}}'; // Asumiendo que tienes el user._id disponible en el contexto

      // Establecer el valor del owner en el formulario antes de enviarlo
      $('#addProductForm').submit(function (event) {
        event.preventDefault();

        // Establecer el owner basado en el rol del usuario
        let ownerValue;
        if (userRole === 'admin') {
          ownerValue = 'admin';
        } else if (userRole === 'premium') {
          ownerValue = userId;
        }

        // Establecer el valor del campo oculto owner
        $('#owner').val(ownerValue);

        // Obtener los datos del formulario
        const productData = {
          title: $('#title').val(),
          description: $('#description').val(),
          price: $('#price').val(),
          thumbnail: $('#thumbnail').val(),
          code: $('#code').val(),
          stock: $('#stock').val(),
          status: $('#status').val(),
          category: $('#category').val(),
          owner: $('#owner').val() // Añadir el owner al producto
        };

        // Enviar la solicitud AJAX para agregar el producto
        $.ajax({
          url: '/api/products/createProd',
          type: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(productData),
        })
          .done(function (response) {
            // Mostrar un mensaje de éxito
            Swal.fire({
              icon: 'success',
              title: 'Producto agregado correctamente',
            });

            // Limpiar los campos del formulario
            $('#addProductForm').trigger('reset');

            // Actualizar la lista de productos
            getProducts();
          })
          .fail(function (error) {
            console.error('Error adding product:', error);
            // Mostrar un mensaje de error con SweetAlert
            Swal.fire({
              icon: 'error',
              title: 'Error agregando el producto',
              text: error.responseJSON ? error.responseJSON.error : 'Unknown error occurred',
            });
          });
      });

      // Función para eliminar un producto
      function deleteProduct(productId) {
        // Enviar la solicitud AJAX para eliminar el producto
        Swal.fire({
          title: 'Estas seguro?',
          text: 'No podras revertir esto!',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          cancelButtonText: 'Cancelar',
          confirmButtonText: 'Si, borrar!'
        }).then((result) => {
          if (result.isConfirmed) {
            $.ajax({
                url: `/api/products/deleteProd/${productId}`,
                type: 'DELETE',
              })
              .done(function (response) {
                // Mostrar un mensaje de éxito
                Swal.fire({
                  icon: 'success',
                  title: 'Producto borrado correctamente',
                });

                // Actualizar la lista de productos antes de recargar la página
                getProducts();

                // Recargar la página después de un breve retraso
                setTimeout(() => {
                  window.location.reload();
                }, 1000); // 1000 milisegundos = 1 segundo
              })
              .fail(function (error) {
                console.error('Error deleting product:', error);
                // Mostrar un mensaje de error con SweetAlert
                Swal.fire({
                  icon: 'error',
                  title: 'Error borrando el producto',
                  text: error.responseJSON ? error.responseJSON.error : 'Unknown error occurred',
                });
              });
          }
        });
      }

      // Función para obtener los productos
      function getProducts() {
        $.ajax({
          url: '/api/products/allProducts',
          type: 'GET',
          contentType: 'application/json',
        })
          .done(function (response) {
            // Asumiendo que response.payload contiene los productos
            let products = response.data;
            let html = '';
            products.forEach(product => {
              const isEditable = userRole === 'admin' || (userRole === 'premium' && product.owner === userId);

              html += `
                <li class="list-group-item" id="product-${product._id}">
                  <div class="d-flex">Titulo: <p class="product-info-${product._id} product-title-${product._id}">${product.title}</p></div>
                  <div class="d-flex">Descripción: <p class="product-info-${product._id} product-description-${product._id}">${product.description}</p></div>
                  <div class="d-flex">Precio: <p class="product-info-${product._id} product-price-${product._id}">${product.price}</p></div>
                  <div class="d-flex">Categoría: <p class="product-info-${product._id} product-category-${product._id}">${product.category}</p></div>
                  <div class="d-flex">Stock: <p class="product-info-${product._id} product-stock-${product._id}">${product.stock}</p></div>
                  <div class="d-flex">Codigo: <p class="product-info-${product._id} product-code-${product._id}">${product.code}</p></div>
                  <div class="d-flex">Disponible: <p class="product-info-${product._id} product-status-${product._id}">${product.status}</p></div>
                  <div class="d-flex">Imagen: <img class="product-info-${product._id} product-thumbnail-${product._id}" height="50" width="50" src="${product.thumbnail}" readonly></div> 
                  <div class="d-flex">Link de imagen:<p class="product-info-${product._id} product-thumbnail-${product._id}">${product.thumbnail}</p></div>
                  ${isEditable ? `
                    <button class="btn btn-primary btn-sm edit-product" data-id="${product._id}">Editar</button>
                    <button class="btn btn-danger btn-sm delete-product" data-id="${product._id}">Borrar</button>
                    <button class="btn btn-success btn-sm save-product d-none" data-id="${product._id}">Guardar</button>
                    <button class="btn btn-primary btn-sm cancel-product d-none" data-id="${product._id}">Cancelar</button>
                  ` : ''}
                </li>
              `;
            });
            $('#productsList').html(html);
          })
          .fail(function (error) {
            console.error('Error getting products:', error);
            // Mostrar un mensaje de error con SweetAlert
            Swal.fire({
              icon: 'error',
              title: 'Error obteniendo productos',
              text: error.responseJSON ? error.responseJSON.error : 'Unknown error occurred',
            });
          });
      }

      // Función para guardar un producto editado
      function saveProduct(productId) {
        const productData = {
          title: document.getElementsByClassName(`product-title-${productId}`)[0].textContent,
          description: document.getElementsByClassName(`product-description-${productId}`)[0].textContent,
          price: document.getElementsByClassName(`product-price-${productId}`)[0].textContent,
          thumbnail: document.getElementsByClassName(`product-thumbnail-${productId}`)[1].textContent,
          code: document.getElementsByClassName(`product-code-${productId}`)[0].textContent,
          stock: document.getElementsByClassName(`product-stock-${productId}`)[0].textContent,
          status: document.getElementsByClassName(`product-status-${productId}`)[0].textContent,
          category: document.getElementsByClassName(`product-category-${productId}`)[0].textContent
        };

        $.ajax({
          url: `/api/products/updateProd/${productId}`,
          type: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify(productData),
        })
          .done(function (response) {
            // Verificar si la respuesta contiene un mensaje de error
            if (response.error) {
              // Mostrar una alerta con SweetAlert2
              Swal.fire({
                icon: 'error',
                title: 'Acceso denegado',
                text: response.error,
              });
            } else {
              // Mostrar un mensaje de éxito
              Swal.fire({
                icon: 'success',
                title: 'Producto actualizado correctamente',
              });
              window.location.reload();
            }
          })
          .fail(function (error) {
            console.error('Error updating product:', error);
            // Mostrar un mensaje de error con SweetAlert
            Swal.fire({
              icon: 'error',
              title: 'Error actualizando el producto',
              text: error.responseJSON ? error.responseJSON.error : 'Unknown error occurred',
            });
          });
      }

      // Función para cancelar la edición de un producto
      function cancelEdit(productId) {
        let fields = document.getElementsByClassName(`product-info-${productId}`);
        for (let i = 0; i < fields.length; i++) {
          fields[i].contentEditable = false;
        }

        // Restaurar el texto original y los eventos de los botones
        $(`#product-${productId} .save-product`).addClass('d-none');
        $(`#product-${productId} .cancel-product`).addClass('d-none');
        $(`#product-${productId} .edit-product`).removeClass('d-none');
        $(`#product-${productId} .delete-product`).removeClass('d-none');

        // Volver a vincular el evento de eliminación del producto
        $(`#product-${productId} .delete-product`).off('click').on('click', function () {
          deleteProduct(productId);
        });
      }

      // Agregar el evento click a los botones de editar
      $('#productsList').on('click', '.edit-product', function () {
        const productId = $(this).data('id');

        let fields = document.getElementsByClassName(`product-info-${productId}`);
        for (let i = 0; i < fields.length; i++) {
          fields[i].contentEditable = true;
        }

        // Cambiar visibilidad de botones
        $(`#product-${productId} .save-product`).removeClass('d-none');
        $(`#product-${productId} .cancel-product`).removeClass('d-none');
        $(`#product-${productId} .edit-product`).addClass('d-none');
        $(`#product-${productId} .delete-product`).addClass('d-none');

        // Vincular el evento de cancelar
        $(`#product-${productId} .cancel-product`).on('click', function () {
          cancelEdit(productId);
        });

        // Vincular el evento de guardar
        $(`#product-${productId} .save-product`).on('click', function () {
          saveProduct(productId);
        });
      });

      // Agregar el evento click a los botones de eliminar
      $('#productsList').on('click', '.delete-product', function () {
        const productId = $(this).data('id');
        deleteProduct(productId);
      });

      // Inicializar la lista de productos
      getProducts();
    });

  </script>

</body>

</html>

